/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 13:53:54 GMT 2018
 */

package evosuite.alexp.blog.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import alexp.blog.model.Post;
import alexp.blog.model.PostEditDto;
import alexp.blog.model.PostRating;
import alexp.blog.model.User;
import alexp.blog.repository.PostRatingRepository;
import alexp.blog.repository.PostRepository;
import alexp.blog.repository.TagRepository;
import alexp.blog.service.PostServiceImpl;
import alexp.blog.service.UserService;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.domain.Page;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PostServiceImpl_ESTest extends alexp.blog.service.PostServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      Post post0 = mock(Post.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(post0).toString();
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
//      doReturn((Object) null).when(postRepository0).saveAndFlush(nullable(java.lang.Object.class));
      doReturn(post0).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long((-1L));
      postServiceImpl0.setPostVisibility(long0, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(postRepository0).findByHiddenIs(anyBoolean() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.getPostsList(1715, 1715);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long((-2197L));
      Post post0 = postServiceImpl0.getPost(long0);
      assertNull(post0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).currentUser();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long((-1208L));
      // Undeclared exception!
      try { 
        postServiceImpl0.vote(long0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alexp.blog.service.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRating postRating0 = mock(PostRating.class, new ViolatedAssumptionAnswer());
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(postRating0).when(postRatingRepository0).findUserRating(anyLong() , anyLong());
//      doReturn("").when(postRatingRepository0).saveAndFlush(nullable(java.lang.Object.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      Post post0 = mock(Post.class, new ViolatedAssumptionAnswer());
      doReturn("").when(post0).toString();
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn(post0).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(user0).getId();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).currentUser();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        postServiceImpl0.vote(long0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to alexp.blog.model.PostRating
         //
         verifyException("alexp.blog.repository.PostRatingRepository$MockitoMock$1955514516", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.getPostsPage((-3701), (-3701));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Page index must not be less than zero!
         //
         verifyException("org.springframework.data.domain.AbstractPageRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.getPostsList(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Page size must not be less than one!
         //
         verifyException("org.springframework.data.domain.AbstractPageRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.findPostsByTag((List<String>) null, (-1001), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alexp.blog.service.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      Post post0 = mock(Post.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(post0).getFullPostText();
      doReturn((Long) null).when(post0).getId();
      doReturn((Collection) null).when(post0).getTags();
      doReturn((String) null).when(post0).getTitle();
      doReturn((String) null).when(post0).toString();
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn(post0).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long((-554L));
      // Undeclared exception!
      try { 
        postServiceImpl0.getEditablePost(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alexp.blog.service.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.saveNewPost((PostEditDto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alexp.blog.service.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((PostRating) null).when(postRatingRepository0).findUserRating(anyLong() , anyLong());
//      doReturn((Object) null).when(postRatingRepository0).saveAndFlush(nullable(java.lang.Object.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Post) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(user0).getId();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).currentUser();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long(422L);
      postServiceImpl0.vote(long0, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRating postRating0 = mock(PostRating.class, new ViolatedAssumptionAnswer());
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(postRating0).when(postRatingRepository0).findUserRating(anyLong() , anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Post) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      Long long0 = new Long((short) (-1));
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(user0).getId();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).currentUser();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      try { 
        postServiceImpl0.vote(long0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cannot vote more than once
         //
         verifyException("alexp.blog.service.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((PostRating) null).when(postRatingRepository0).findUserRating(anyLong() , anyLong());
//      doReturn((Object) null).when(postRatingRepository0).saveAndFlush(nullable(java.lang.Object.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Post) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(user0).getId();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).currentUser();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long(422L);
      postServiceImpl0.vote(long0, true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(postRepository0).findAll(any(org.springframework.data.domain.Pageable.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(userService0).isAdmin();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Page<Post> page0 = postServiceImpl0.getPostsPage(564, 970);
      assertNull(page0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(postRepository0).findByHiddenFalse(any(org.springframework.data.domain.Pageable.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(userService0).isAdmin();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Page<Post> page0 = postServiceImpl0.getPostsPage(2, 2);
      assertNull(page0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long((-3021L));
      postServiceImpl0.deletePost(long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(postRepository0).findByHiddenIs(anyBoolean() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.getPostsList(3034, 39);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long((-3021L));
      // Undeclared exception!
      try { 
        postServiceImpl0.setPostVisibility(long0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alexp.blog.service.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(postRepository0).findOne(anyLong());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Long long0 = new Long(0L);
      PostEditDto postEditDto0 = postServiceImpl0.getEditablePost(long0);
      assertNull(postEditDto0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      PostRatingRepository postRatingRepository0 = mock(PostRatingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRatingRepository", (Object) postRatingRepository0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(postRepository0).findTopPosts(any(org.springframework.data.domain.Pageable.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      TagRepository tagRepository0 = mock(TagRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "tagRepository", (Object) tagRepository0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userService", (Object) userService0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.getTopPostsList();
      assertNull(list0);
  }
}
